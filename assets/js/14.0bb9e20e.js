(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{400:function(t,_,s){t.exports=s.p+"assets/img/001_齐次坐标公式.92cb8d24.png"},401:function(t,_,s){t.exports=s.p+"assets/img/002_图像的缩小_重采样.b6cb51d5.png"},402:function(t,_,s){t.exports=s.p+"assets/img/003_图像的缩小_算法示例.c58c1ec0.png"},403:function(t,_,s){t.exports=s.p+"assets/img/004_图像的放大_算法示例1.48d0b8c1.png"},404:function(t,_,s){t.exports=s.p+"assets/img/005_图像的放大_最近邻插值.1c80f8ee.png"},405:function(t,_,s){t.exports=s.p+"assets/img/006_图像的放大_双线性插值法实现步骤1.325c2508.png"},406:function(t,_,s){t.exports=s.p+"assets/img/007_图像的放大_双线性插值法实现步骤2.f0295ce1.png"},407:function(t,_,s){t.exports=s.p+"assets/img/008_图像的放大_双线性插值法实现步骤3.7b299901.png"},408:function(t,_,s){t.exports=s.p+"assets/img/009_图像的放大_双线性插值法实现步骤4.77479fe9.png"},409:function(t,_,s){t.exports=s.p+"assets/img/010_图像的放大_双线性插值法示例1.738f334c.png"},410:function(t,_,s){t.exports=s.p+"assets/img/011_图像的放大_双线性插值法示例2.93e6cd32.png"},411:function(t,_,s){t.exports=s.p+"assets/img/012_图像的放大_双线性插值法示例3.1cd4257b.png"},412:function(t,_,s){t.exports=s.p+"assets/img/013_图像的放大_双线性插值法示例4.fd679408.png"},413:function(t,_,s){t.exports=s.p+"assets/img/014_图像的放大_双线性插值法示例5.9c547a65.png"},414:function(t,_,s){t.exports=s.p+"assets/img/015_图像的放大_双三次插值公式.145c0ada.png"},415:function(t,_,s){t.exports=s.p+"assets/img/016_图像的放大_双三次插值实现步骤.97e6d779.png"},481:function(t,_,s){"use strict";s.r(_);var v=s(8),i=Object(v.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"图像缩放的公式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#图像缩放的公式"}},[t._v("#")]),t._v(" 图像缩放的公式")]),t._v(" "),_("h3",{attrs:{id:"图像缩放的变换公式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#图像缩放的变换公式"}},[t._v("#")]),t._v(" 图像缩放的变换公式")]),t._v(" "),_("p",[t._v("图像缩放是图像的一种形状变换，指图像中的像素点相对于坐标原点沿 $X$ 方向和 $Y$ 方向，分别按照比例系数 $C_x$ 和 $C_y$ 进行尺度的变换，其变换公式如下：")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("直角坐标公式：$x={c_x}{x_0},~~y={c_y}{y_0}$")]),t._v(" "),_("ul",[_("li",[t._v("$(x_0,y_0)、(x,y)$分别为缩放前后的坐标")]),t._v(" "),_("li",[t._v("比例系数 > 1：放大")]),t._v(" "),_("li",[t._v("比例系数 < 1：缩小")])])]),t._v(" "),_("li",[_("p",[t._v("齐次坐标公式\n")]),_("div",{attrs:{align:"left"}},[_("img",{attrs:{src:s(400),width:"50%"}})]),_("p")])]),t._v(" "),_("h2",{attrs:{id:"图像的缩小"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#图像的缩小"}},[t._v("#")]),t._v(" 图像的缩小")]),t._v(" "),_("ul",[_("li",[t._v("按比例缩小：水平、垂直方向的缩小比例相同")]),t._v(" "),_("li",[t._v("不按比例缩小：水平、垂直方向的缩小比例不同")])]),t._v(" "),_("h3",{attrs:{id:"图像缩小的实现方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#图像缩小的实现方法"}},[t._v("#")]),t._v(" 图像缩小的实现方法")]),t._v(" "),_("ul",[_("li",[t._v("图像缩小实际上就是对原有的多个样本（像素）进行挑选或处理，从而获得期望的缩小尺寸的样本（像素），并且尽量保持原有的特征不丢失")]),t._v(" "),_("li",[t._v("最简单的方法就是等间隔地选取样本（重采样）\n"),_("div",{attrs:{align:"left"}},[_("img",{attrs:{src:s(401),width:"50%"}})])])]),t._v(" "),_("h4",{attrs:{id:"算法步骤"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#算法步骤"}},[t._v("#")]),t._v(" 算法步骤")]),t._v(" "),_("ol",[_("li",[t._v("确定重采样的行和列，即计算采样间隔（等于缩小系数的倒数）\n"),_("ul",[_("li",[t._v("$M×N$ 的图像缩小为：${c_xM} × {c_yN}$，其中 $c_x、c_y \\lt 1$")]),t._v(" "),_("li",[t._v("采样间隔为：$k_x=1/c_x ，k_y=1/c_y$")])])]),t._v(" "),_("li",[t._v("对原图像进行重采样，得到缩小后的新图像\n"),_("ul",[_("li",[t._v("确定结果图像各像素的坐标，即 $0 \\le x \\le c_xM-1，0 \\le y \\le c_yN-1$")]),t._v(" "),_("li",[t._v("将结果图像各像素的坐标映射到原图像空间中，获得结果图像各像素的像素值，即"),_("br"),t._v(" "),_("div",{attrs:{align:"center"}},[t._v("$G(x, y) = F(int(k_x×x), int(k_y×y))$")]),t._v("\n其中，$G$ 为缩小后的结果图像，$F$ 为原图像")])])])]),t._v(" "),_("h3",{attrs:{id:"算法示例"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#算法示例"}},[t._v("#")]),t._v(" 算法示例")]),t._v(" "),_("br"),t._v(" "),_("div",{attrs:{align:"left"}},[_("img",{attrs:{src:s(402),width:"90%"}})]),t._v(" "),_("h2",{attrs:{id:"图像的放大"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#图像的放大"}},[t._v("#")]),t._v(" 图像的放大")]),t._v(" "),_("ul",[_("li",[t._v("图像放大从字面上看，是图像缩小的逆操作。但是从信息处理的角度来看，则难易程度完全不一样\n"),_("ul",[_("li",[t._v("图像缩小是从多个信息中选出所需要的信息")]),t._v(" "),_("li",[t._v("图像放大则是需要对多出的空位填入适当的值，是信息的估计，较图像缩小更难")])])]),t._v(" "),_("li",[t._v("按比例放大：水平、垂直方向的放大比例相同")]),t._v(" "),_("li",[t._v("不按比例放大：水平、垂直方向的放大比例不同")])]),t._v(" "),_("h3",{attrs:{id:"图像放大的实现方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#图像放大的实现方法"}},[t._v("#")]),t._v(" 图像放大的实现方法")]),t._v(" "),_("p",[t._v("如果需要将原图像放大 $k$ 倍，则将原图像中的每个像素值，填在新图像中对应的 $k×k$ 大小的子块中。")]),t._v(" "),_("h4",{attrs:{id:"算法步骤-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#算法步骤-2"}},[t._v("#")]),t._v(" 算法步骤")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("计算放大后图像的大小")]),t._v(" "),_("ul",[_("li",[t._v("$M×N$ 的图像放大为：$c_x M×c_y N$，其中 $c_x、c_y > 1$")])])]),t._v(" "),_("li",[_("p",[t._v("求出放大的新图像像素值")]),t._v(" "),_("ul",[_("li",[t._v("将结果图像各像素的空间坐标映射到原图像空间中")]),t._v(" "),_("li",[t._v("计算结果图像各像素点的像素值 $G(x,y)=F(x/c_x , y/c_y)$ 。\t其中，$G$ 为放大后的结果图像，$F$ 为放大前的原图像，且 $0 \\le x \\le c_xM-1、0 \\le y \\le c_yN-1$")])])])]),t._v(" "),_("div",{attrs:{align:"left"}},[_("img",{attrs:{src:s(403),width:"90%"}})]),t._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[t._v("当映射坐标 $(x/c_x , y/c_y)$ 在原图像空间中不存在时，采用插值方法计算小数坐标处的像素值")])]),t._v(" "),_("h3",{attrs:{id:"常用插值方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常用插值方法"}},[t._v("#")]),t._v(" 常用插值方法")]),t._v(" "),_("ul",[_("li",[t._v("常用的插值方法：最近邻插值、双线性插值、双三次插值\n"),_("ul",[_("li",[t._v("最近邻插值：算法简单，速度最快，插值结果不连续，视觉上锯齿效应明显")]),t._v(" "),_("li",[t._v("双线性插值：插值结果相对连续，视觉上比最近邻插值要平滑")]),t._v(" "),_("li",[t._v("双三次插值：在保持细节方面比双线性插值相对要好，是商业图像编辑程序的标准插值方法")])])])]),t._v(" "),_("h4",{attrs:{id:"最近邻插值"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#最近邻插值"}},[t._v("#")]),t._v(" 最近邻插值")]),t._v(" "),_("ul",[_("li",[_("p",[_("strong",[t._v("算法原理")]),_("br"),t._v("\n将放大后未知的像素点坐标换算到原始图像上，并与原始图像上邻近的4个像素点做比较，最靠近的邻近点的像素值即为该未知像素点的像素值。")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("算法的实现步骤")])])])]),t._v(" "),_("ol",[_("li",[t._v("将放大的结果图像 $G$ 的像素点 $(u,v)$ 的坐标换算到原始图像上对应像素点的坐标 $(x+Δx,y+Δy)$")]),t._v(" "),_("li",[t._v("在原始图像上分别计算像素点 $(x+Δx,y+Δy)$ 与 4 个邻近像素点 $(x,y)$、$(x,y+1)$、$(x+1,y)$、$(x+1,y+1)$ 之间的距离（如欧氏距离），取距离最短的点的像素值作为像素点 $(x+Δx、y+Δy)$ 的像素值，也即放大后的像素点 $(u,v)$ 的像素值")])]),t._v(" "),_("div",{attrs:{align:"center"}},[_("img",{attrs:{src:s(404),width:"70%"}})]),t._v(" "),_("h4",{attrs:{id:"双线性插值"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#双线性插值"}},[t._v("#")]),t._v(" 双线性插值")]),t._v(" "),_("ul",[_("li",[_("p",[_("strong",[t._v("算法原理")])]),t._v(" "),_("ul",[_("li",[t._v("首先，假设像素的灰度级在水平、垂直方向上都是线性变化的。")]),t._v(" "),_("li",[t._v("其次，为了求解未知像素点 $P$ 的灰度值，需要将其坐标换算到原始图像上，并计算原始图像上的 4 个邻近像素点 $A、B、C、D$ 对 $P$ 点的影响，即 $P$ 点的灰度值由 4 个邻近点 $A、B、C、D$  的灰度级加权求和得到（权值可以采用距离进行度量，距离越近，权值越大）。")])])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("算法的实现步骤")])])])]),t._v(" "),_("ol",[_("li",[_("p",[t._v("将结果图像 $G$ 的未知像素点 $P$ 的坐标 $(u,v)$ 换算到原始图像 $F$ 上对应像素点的坐标 $(x+Δx,y+Δy)$，并确定其在 $F$ 上的 4 个邻近点 $A、B、C、D$ 的坐标，分别为 $(x,y)$、 $(x,y+1)$ 、$(x+1,y)$、 $(x+1,y+1)$\n")]),_("div",{attrs:{align:"center"}},[_("img",{attrs:{src:s(405),width:"70%"}})]),_("p")]),t._v(" "),_("li",[_("p",[t._v("由 $A、B$ 两点插值计算出坐标为 $(x,y+Δy)$ 的 $e$ 像素点的灰度值 $F(x,y+Δy)$")])])]),t._v(" "),_("p",[t._v("$$\nF(x,y+Δy)=\\frac{\\sqrt{(x-x)^2+((y+1)-(y+Δy))^2}}{\\sqrt{(x-x)^2+((y+1)-y)^2}}F(x,y) + \\frac{\\sqrt{(x-x)^2+((y+Δy)-y)^2}}{\\sqrt{(x-x)^2+((y+1)-y)^2}}F(x,y+1)\n$$")]),t._v(" "),_("div",{attrs:{align:"center"}},[_("img",{attrs:{src:s(406),width:"70%"}})]),t._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[t._v("由 $C、D$ 两点插值计算出坐标为 $(x+1,y+Δy)$ 的 $f$ 像素点的灰度值 $F(x+1,y+Δy)$")])]),t._v(" "),_("p",[t._v("$$\nF(x+1,y+Δy)=\\frac{\\sqrt{((x+1)-(x+1))^2+((y+1)-(y+Δy))^2}}{\\sqrt{((x+1)-(x+1))^2+((y+1)-y)^2}}F(x+1,y) + \\frac{\\sqrt{((x+1)-(x+1))^2+((y+Δy)-y)^2}}{\\sqrt{((x+1)-(x+1))^2+((y+1)-y)^2}}F(x+1,y+1)\n\\\n$$")]),t._v(" "),_("div",{attrs:{align:"center"}},[_("img",{attrs:{src:s(407),width:"70%"}})]),t._v(" "),_("ol",{attrs:{start:"4"}},[_("li",[t._v("由 $e、f$ 两点插值计算出坐标为 $(x+Δx,y+Δy)$ 的 $P$ 像素点的灰度值 $F(x+Δx,y+Δy)$")])]),t._v(" "),_("p",[t._v("$$\nF(x+1,y+Δy)= \\frac{\\sqrt{((x+1)-(x+Δx))^2+((y+Δy)-(y+Δy))^2}}{\\sqrt{((x+1)-x)^2+((y+Δy)-(y+Δy))^2}}F(x,y+Δy) \\")]),t._v(" "),_("ul",[_("li",[t._v("\\frac{\\sqrt{((x+Δx)-x)^2+((y+Δy)-(y+Δy))^2}}{\\sqrt{((x+1)-x)^2+((y+Δy)-(y+Δy))^2}}F(x+1,y+Δy)\n\\\n$$")])]),t._v(" "),_("div",{attrs:{align:"center"}},[_("img",{attrs:{src:s(408),width:"70%"}})]),t._v(" "),_("br"),t._v(" "),_("ul",[_("li",[_("strong",[t._v("算法示例")])])]),t._v(" "),_("div",{attrs:{align:"left"}},[_("img",{attrs:{src:s(409),width:"70%"}})]),t._v(" "),_("div",{attrs:{align:"left"}},[_("img",{attrs:{src:s(410),width:"70%"}})]),t._v(" "),_("div",{attrs:{align:"left"}},[_("img",{attrs:{src:s(411),width:"70%"}})]),t._v(" "),_("div",{attrs:{align:"left"}},[_("img",{attrs:{src:s(412),width:"70%"}})]),t._v(" "),_("div",{attrs:{align:"left"}},[_("img",{attrs:{src:s(413),width:"70%"}})]),t._v(" "),_("h4",{attrs:{id:"双三次插值"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#双三次插值"}},[t._v("#")]),t._v(" 双三次插值")]),t._v(" "),_("ul",[_("li",[_("p",[_("strong",[t._v("算法原理")])]),t._v(" "),_("ul",[_("li",[t._v("首先，将未知像素点 $P$ 的坐标 $(u,v)$ 换算到原始图像空间的 $(x,y)$ 处")]),t._v(" "),_("li",[t._v("其次，确定原始图像上的 16 个邻近像素点")]),t._v(" "),_("li",[t._v("最后，采用如下的三次多项式计算未知像素点P的灰度值 $F(x,y)$:\n"),_("div",{attrs:{align:"center"}},[_("img",{attrs:{src:s(414),width:"30%"}})]),t._v("\n其中，16 个未知系数 $a_{ij}$ 可由原始图像 $(x,y)$ 处的 16 个邻近像素所确定的方程组进行求解")])])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("算法实现步骤")])]),t._v(" "),_("ul",[_("li",[t._v("首先，进行坐标映射，确定原图像中的 16 个邻近点")]),t._v(" "),_("li",[t._v("其次，在 4 条水平直线上分别用三次多项式插值计算点 $A$、$B$、$C$、$D$ 处的灰度值")]),t._v(" "),_("li",[t._v("最后，对 $A$、$B$、$C$、$D$ 四点在垂直方向上再做三次多项式内插\n"),_("br")])])])]),t._v(" "),_("div",{attrs:{align:"center"}},[_("img",{attrs:{src:s(415),width:"30%"}})])])}),[],!1,null,null,null);_.default=i.exports}}]);