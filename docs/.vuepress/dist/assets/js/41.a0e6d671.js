(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{471:function(t,a,s){"use strict";s.r(a);var n=s(8),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"python函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python函数"}},[t._v("#")]),t._v(" python函数")]),t._v(" "),a("h3",{attrs:{id:"基本函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本函数"}},[t._v("#")]),t._v(" 基本函数")]),t._v(" "),a("h4",{attrs:{id:"print函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#print函数"}},[t._v("#")]),t._v(" print函数")]),t._v(" "),a("ul",[a("li",[t._v("功能：输出变量到控制台。在默认情况下，print 函数输出内容之后，会自动在内容末尾增加换行。如果不希望末尾增加换行，可以在 print 函数输出内容的后面增加 "),a("code",[t._v('end=""')]),t._v("，其中 "),a("code",[t._v('""')]),t._v(" 中间可以指定 "),a("code",[t._v("print")]),t._v(" 函数输出内容之后，继续希望显示的内容。")]),t._v(" "),a("li",[t._v("例子：")])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 向控制台输出内容结束之后，不会换行")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h4",{attrs:{id:"type函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#type函数"}},[t._v("#")]),t._v(" type函数")]),t._v(" "),a("ul",[a("li",[t._v("功能：查看变量类型")])]),t._v(" "),a("h4",{attrs:{id:"input函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#input函数"}},[t._v("#")]),t._v(" input函数")]),t._v(" "),a("ul",[a("li",[t._v("语法："),a("code",[t._v('字符串变量 = input("提示信息：")')])]),t._v(" "),a("li",[t._v("功能：从键盘等待用户的输入，输入的任何内容python都认为是一个字符串")])]),t._v(" "),a("h4",{attrs:{id:"list函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list函数"}},[t._v("#")]),t._v(" list函数")]),t._v(" "),a("ul",[a("li",[t._v("功能：把元组转换成列表")]),t._v(" "),a("li",[t._v("例子：")])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("元组"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n")])])]),a("h4",{attrs:{id:"tuple函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tuple函数"}},[t._v("#")]),t._v(" tuple函数")]),t._v(" "),a("ul",[a("li",[t._v("功能：把列表转换成元组")]),t._v(" "),a("li",[t._v("例子：")])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("tuple")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("列表"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"random工具包函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#random工具包函数"}},[t._v("#")]),t._v(" random工具包函数")]),t._v(" "),a("h4",{attrs:{id:"randint-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#randint-函数"}},[t._v("#")]),t._v(" randint 函数")]),t._v(" "),a("ul",[a("li",[t._v("语法："),a("code",[t._v("random.randint(a, b)")])]),t._v(" "),a("li",[t._v("功能：生成 [a, b] 之间的随机整数，包含 a 和 b")]),t._v(" "),a("li",[t._v("例子：")])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("random"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("randint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 生成的随机数n: 12 <= n <= 20   ")]),t._v("\nrandom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("randint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 结果永远是 20   ")]),t._v("\nrandom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("randint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 该语句是错误的，下限必须小于上限")]),t._v("\n")])])]),a("h3",{attrs:{id:"pandas工具包函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pandas工具包函数"}},[t._v("#")]),t._v(" pandas工具包函数")]),t._v(" "),a("h4",{attrs:{id:"drop-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#drop-函数"}},[t._v("#")]),t._v(" drop 函数")]),t._v(" "),a("ul",[a("li",[t._v("语法:"),a("code",[t._v("DataFrame.drop(labels=None, axis=0, index=None, columns=None, level=None, inplace=False, errors='raise')")])]),t._v(" "),a("li",[t._v("功能:从行或列中删除指定的标签,即删除某一行或某一列")]),t._v(" "),a("li",[t._v("参数含义:\n"),a("ul",[a("li",[t._v("labels: 要删除的行或列,可以是指定的行序或列序,也可以是行名或列名")]),t._v(" "),a("li",[t._v("axis: 指定是删除行还是删除列, 0 表示行, 1 表示列,默认是 0")]),t._v(" "),a("li",[t._v("index: 指定行的替代方法, ("),a("code",[t._v("labels, axis=0")]),t._v(" 等价于 "),a("code",[t._v("index=labels")]),t._v(")")]),t._v(" "),a("li",[t._v("columns: 指定列的替代方法,("),a("code",[t._v("labels, axis=1")]),t._v(" 等价于 "),a("code",[t._v("columns=labels")]),t._v(")")]),t._v(" "),a("li",[t._v("levels: 可选项,对于多索引,指定要删除标签的级别,可以是序号也可以是名称.比如在三维中,指定要删除第几个面的行列")]),t._v(" "),a("li",[t._v("i你place: 是否替换原来的数据, True 表示替换原数据, False 表示原数据名对应的内存值并不改变，而是将结果赋给一个新的数组.默认是 False")]),t._v(" "),a("li",[t._v("errors: "),a("code",[t._v("ignore")]),t._v("或"),a("code",[t._v("raise")]),t._v(", 默认"),a("code",[t._v("raise")]),t._v(". "),a("code",[t._v("ignore")]),t._v("抑制错误并仅删除现有标签,"),a("code",[t._v("raise")]),t._v("则抛出错误")])])]),t._v(" "),a("li",[t._v("返回值:"),a("code",[t._v("inplace=False")]),t._v("返回删除后的数据，"),a("code",[t._v("inplace=True")]),t._v("，则没有返回值,即为None")])])])}),[],!1,null,null,null);a.default=e.exports}}]);